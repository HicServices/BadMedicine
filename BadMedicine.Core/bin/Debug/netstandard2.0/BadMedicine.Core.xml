<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BadMedicine.Core</name>
    </assembly>
    <members>
        <member name="T:BadMedicine.BucketList`1">
            <summary>
            Picks random object of Type T based on a specified probability for each element.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BadMedicine.BucketList`1.#ctor(System.Random)">
            <summary>
            Creates a new empty collection seeded with <paramref name="r"/>
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:BadMedicine.BucketList`1.GetRandom">
            <summary>
            Returns a random bucket (based on the probability of each bucket)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.BucketList`1.GetRandom(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns a random bucket from the element indices provided (based on the probability of each bucket)
            </summary>
            <param name="usingOnlyIndices"></param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.BucketList`1.Add(System.Int32,`0)">
            <summary>
            Adds a new bucket to the list which will be returned using the total <paramref name="probability"/> ratio (relative
            to the other buckets).
            </summary>
            <param name="probability"></param>
            <param name="toAdd"></param>
        </member>
        <member name="T:BadMedicine.Datasets.Appointment">
            <summary>
            Data class describing an appointment including a guid identifier
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.Appointment.Identifier">
            <summary>
            Globally unique identifier for this appointment
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.Appointment.StartDate">
            <summary>
            Random date within the lifetime of the <see cref="T:BadMedicine.Person"/> used for construction
            </summary>
        </member>
        <member name="M:BadMedicine.Datasets.Appointment.#ctor(BadMedicine.Person,System.Random)">
            <summary>
            Creates a new randomly generated appointment within the lifetime of the <paramref name="testPerson"/>
            </summary>
            <param name="testPerson"></param>
            <param name="r"></param>
        </member>
        <member name="T:BadMedicine.Datasets.Biochemistry">
            <summary>
            Test about biochemistry lab tests e.g. CRE (Creatinine). 
            </summary>
        </member>
        <member name="M:BadMedicine.Datasets.Biochemistry.#ctor(System.Random)">
            <inheritdoc/>
        </member>
        <member name="M:BadMedicine.Datasets.Biochemistry.GenerateTestDataRow(BadMedicine.Person)">
            <inheritdoc/>
        </member>
        <member name="M:BadMedicine.Datasets.Biochemistry.WriteHeaders(System.IO.StreamWriter)">
            <inheritdoc/>
        </member>
        <member name="T:BadMedicine.Datasets.BiochemistryRecord">
            <summary>
            Data class representing a single row in <see cref="T:BadMedicine.Datasets.Biochemistry"/> (use if you want to use randomly generated data directly
            rather than generate it into a file).
            </summary>
        </member>
        <member name="M:BadMedicine.Datasets.BiochemistryRecord.#ctor(System.Random)">
            <summary>
            Generates a new random biochemistry test.
            </summary>
            <param name="r"></param>
        </member>
        <member name="T:BadMedicine.Datasets.CarotidArteryScan">
            <summary>
            Test data based on the Scottish Vascular Labs CARSCAN database table
            </summary>
        </member>
        <member name="M:BadMedicine.Datasets.CarotidArteryScan.#ctor(System.Random)">
            <inheritdoc/>
        </member>
        <member name="M:BadMedicine.Datasets.CarotidArteryScan.GenerateTestDataRow(BadMedicine.Person)">
            <inheritdoc/>
        </member>
        <member name="M:BadMedicine.Datasets.CarotidArteryScan.WriteHeaders(System.IO.StreamWriter)">
            <inheritdoc/>
        </member>
        <member name="T:BadMedicine.Datasets.DataGenerator">
            <summary>
            Base class for all randomly generated datasets.  Handles generating random datatypes and writing
            out to csv etc.
            </summary>
        </member>
        <member name="E:BadMedicine.Datasets.DataGenerator.RowsGenerated">
            <inheritdoc/>
        </member>
        <member name="F:BadMedicine.Datasets.DataGenerator.r">
            <summary>
            Use for all your random needs to ensure Seed injection support.
            </summary>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.#ctor(System.Random)">
            <summary>
            Creates a new instance which uses the provided <paramref name="rand"/> as a seed for generating data
            </summary>
            <param name="rand"></param>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.GenerateTestDataFile(BadMedicine.IPersonCollection,System.IO.FileInfo,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.GenerateTestDataRow(BadMedicine.Person)">
            <summary>
            Returns a single row of data for writing to the output CSV.  This can include string elements with newlines, quotes etc.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.WriteHeaders(System.IO.StreamWriter)">
            <summary>
            Outputs the top line of the CSV (column headers)
            </summary>
            <param name="sw"></param>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.Concat(System.Random,System.Int32,System.Int32,System.Func{System.String},System.String)">
            <summary>
            Concatenates between <paramref name="min"/> and <paramref name="max"/> calls to the <paramref name="generator"/>
            </summary>
            <param name="r"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="generator"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.GetGaussian">
            <summary>
            returns random number between -1 and 1 with normal distribution (more numbers near 0 than near 1/-1).  The standard
            deviation is 0.3.  Any values outside the range (5 in 10,000 or so) are adjusted to -1 or 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.GetGaussian(System.Double,System.Double,System.Int32)">
            <summary>
            returns random number between lowerBoundary and upperBoundary with a gaussian distribution around the middle
            </summary>
            <param name="upperBoundary">Highest number that should be generated</param>
            <param name="digits">The number of decimal places to have in the number</param>
            <param name="lowerBoundary">Lowest number that should be generated</param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.GetGaussianInt(System.Double,System.Double)">
            <inheritdoc cref="M:BadMedicine.Datasets.DataGenerator.GetGaussian(System.Double,System.Double,System.Int32)"/>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.Swap(System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            returns <paramref name="swapFor"/> if <paramref name="swapIfIn"/> contains the input <paramref name="randomInt"/> (otherwise returns the input)
            </summary>
            <param name="randomInt"></param>
            <param name="swapIfIn"></param>
            <param name="swapFor"></param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.GetRandomDouble(System.Random)">
            <summary>
            Returns a random double or string value that represents a double e.g. "2.1".  In future this might return
            floats with e specification e.g. "1.7E+3"
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.GetRandomGPCode(System.Random)">
            <summary>
            Returns a random 'GPCode'.  This is a letter followed by up to 3 digits.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.GetRandomLetter(System.Boolean,System.Random)">
            <summary>
            Gets a random letter (A - Z)
            </summary>
            <param name="upperCase"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.GetRandomCHIStatus(System.Random)">
            <summary>
            Returns a random 'status' for a CHI or sometimes null.  Values include 'C' (current), 'H' (historical), 'L'(legacy?) and 'R'(retracted?)
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.EmbeddedCsvToDataTable(System.Type,System.String,System.Data.DataTable)">
            <summary>
            Reads an embedded resource csv file that sits side by side (in terms of namespace) with the <paramref name="requestingType"/>
            </summary>
            <param name="requestingType"></param>
            <param name="resourceFileName"></param>
            <param name="dt">Optional - provide if you want to strongly type certain Columns.  New columns will be added to this table
            if unmatched columns are read from the csv.</param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.GetRandomSentence(System.Random)">
            <summary>
            Returns a random sentence.  There are 391 available.  They were created by https://randomwordgenerator.com/sentence.php
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.Datasets.DataGenerator.WriteLookups(System.IO.DirectoryInfo)">
            <summary>
            Writes out all lookup tables for all datasets.  These are tables which map codes to descriptions.
            </summary>
            <param name="dir"></param>
        </member>
        <member name="T:BadMedicine.Datasets.Demography">
            <summary>
            Address and patient details as might appear in the CHI register
            </summary>
        </member>
        <member name="M:BadMedicine.Datasets.Demography.#ctor(System.Random)">
            <inheritdoc/>
        </member>
        <member name="M:BadMedicine.Datasets.Demography.GenerateTestDataRow(BadMedicine.Person)">
            <inheritdoc/>
        </member>
        <member name="M:BadMedicine.Datasets.Demography.WriteHeaders(System.IO.StreamWriter)">
            <inheritdoc/>
        </member>
        <member name="T:BadMedicine.Datasets.DemographyAddress">
            <summary>
            Data model for a 5 line address in which some lines might be null
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.DemographyAddress.Line1">
            <summary>
            Top line of the address, may just be a number or may be a number followed by a street or just a street/house name
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.DemographyAddress.Line2">
            <summary>
            Second line of the address may be a street name or a <see cref="P:BadMedicine.Datasets.DemographyPostcode.District"/>
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.DemographyAddress.Line3">
            <summary>
            Third line of the address may be a <see cref="P:BadMedicine.Datasets.DemographyPostcode.District"/> or <see cref="P:BadMedicine.Datasets.DemographyPostcode.Ward"/>
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.DemographyAddress.Line4">
            <summary>
            Fourth line of the address may be a <see cref="P:BadMedicine.Datasets.DemographyPostcode.Ward"/> or null
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.DemographyAddress.Postcode">
            <summary>
            Randomly generated UK postcode
            </summary>
        </member>
        <member name="M:BadMedicine.Datasets.DemographyAddress.#ctor(System.Random)">
            <summary>
            Generates a random address with a random street name which might have a number or not.  The
            randomly generated <see cref="P:BadMedicine.Datasets.DemographyAddress.Postcode"/> will have the correct district/ward to match the code.
            </summary>
            <param name="r"></param>
        </member>
        <member name="F:BadMedicine.Datasets.DemographyAddress.StreetNames">
            <summary>
            List of all street names in Tayside
            </summary>
        </member>
        <member name="F:BadMedicine.Datasets.DemographyAddress.DundeePostcodes">
            <summary>
            All Tayside postcodes and the associated District/Ward
            </summary>
        </member>
        <member name="T:BadMedicine.Datasets.DemographyPostcode">
            <summary>
            Data model for a UK postcode
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.DemographyPostcode.Value">
            <summary>
            The full postcode e.g. "DD8 3PZ"
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.DemographyPostcode.Ward">
            <summary>
            The region associated with the postcode e.g. "Angus"
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.DemographyPostcode.District">
            <summary>
            The district associated with the postcode e.g. "Brechin and Edzell"
            </summary>
        </member>
        <member name="M:BadMedicine.Datasets.DemographyPostcode.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new UK Postcode with it's associated Ward/District (See <see cref="P:BadMedicine.Datasets.DemographyPostcode.Ward"/> and <see cref="P:BadMedicine.Datasets.DemographyPostcode.District"/>)
            </summary>
            <param name="value"></param>
            <param name="ward"></param>
            <param name="district"></param>
        </member>
        <member name="T:BadMedicine.Datasets.HospitalAdmissions">
            <summary>
            Generates synthetic random data that is representative of patient hospital admissions data
            </summary>
        </member>
        <member name="M:BadMedicine.Datasets.HospitalAdmissions.#ctor(System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:BadMedicine.Datasets.HospitalAdmissionsRecord">
            <summary>
            Random record for when a <see cref="T:BadMedicine.Person"/> entered hospital.  Basic logic is implemented here to ensure that <see cref="P:BadMedicine.Datasets.HospitalAdmissionsRecord.DischargeDate"/>
            is after <see cref="P:BadMedicine.Datasets.HospitalAdmissionsRecord.AdmissionDate"/> and that the person was alive at the time.    
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.HospitalAdmissionsRecord.AdmissionDate">
            <summary>
            Random date indicating the time that the patient attended hospital
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.HospitalAdmissionsRecord.DischargeDate">
            <summary>
            Random date indicating the time/date patient was discharged from hospital (will be up to 10 days after <see cref="P:BadMedicine.Datasets.HospitalAdmissionsRecord.AdmissionDate"/>)
            </summary>
        </member>
        <member name="P:BadMedicine.Datasets.HospitalAdmissionsRecord.Condition1">
            <summary>
            A random ICD Code based on the distribution of ICD codes in real hospital admissions
            </summary>
        </member>
        <member name="F:BadMedicine.Datasets.HospitalAdmissionsRecord.ICD10MonthHashMap">
            <summary>
            Maps ColumnAppearingIn to each month we might want to generate random data in (Between <see cref="F:BadMedicine.Datasets.HospitalAdmissionsRecord.MinimumDate"/> and <see cref="F:BadMedicine.Datasets.HospitalAdmissionsRecord.MaximumDate"/>)
            to the row numbers which were active at that time (based on AverageMonthAppearing and StandardDeviationMonthAppearing)
            </summary>
        </member>
        <member name="F:BadMedicine.Datasets.HospitalAdmissionsRecord.ICD10Rows">
            <summary>
            Maps Row(Key) to the CountAppearances/TestCode
            </summary>
        </member>
        <member name="T:BadMedicine.Datasets.IDataGenerator">
            <summary>
            Interface for classes which generate test data to disk.
            </summary>
        </member>
        <member name="E:BadMedicine.Datasets.IDataGenerator.RowsGenerated">
            <summary>
            Periodically fired when writing out rows
            </summary>
        </member>
        <member name="M:BadMedicine.Datasets.IDataGenerator.GenerateTestDataFile(BadMedicine.IPersonCollection,System.IO.FileInfo,System.Int32)">
            <summary>
            Create the dataset in the given file location using person identifiers in the <paramref name="cohort"/>
            </summary>
            <param name="cohort">All people in the test data cohort, allows linkage between different randomly generated test datasets</param>
            <param name="target">The file that will be created</param>
            <param name="numberOfRecords">The number of fake data records that should appear in the file created</param>
        </member>
        <member name="M:BadMedicine.Datasets.Prescribing.#ctor(System.Random)">
            <inheritdoc/>
        </member>
        <member name="F:BadMedicine.Datasets.PrescribingRecord.weightToRow">
            <summary>
            every row in data table has a weigth (the number of records in our bichemistry with this sample type, this dictionary lets you input
            a record number 0-maxWeight and be returned an appropriate row from the table based on its weighting
            </summary>
        </member>
        <member name="T:BadMedicine.DateTimeExtensions">
            <summary>
            Extension methods for the <see cref="T:System.DateTime"/> class
            </summary>
        </member>
        <member name="M:BadMedicine.DateTimeExtensions.Max(System.DateTime,System.DateTime)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> representing the maximum of <paramref name="a"/> and <paramref name="b"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BadMedicine.DateTimeExtensions.Min(System.DateTime,System.DateTime)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> representing the minimum of <paramref name="a"/> and <paramref name="b"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:BadMedicine.IPersonCollection">
            <summary>
            A factory and collection for <see cref="T:BadMedicine.Person"/>.  Pass around to ensure all datasets share the same
            patient identifiers.
            </summary>
        </member>
        <member name="P:BadMedicine.IPersonCollection.People">
            <summary>
            The last set of randomly generated patients
            </summary>
        </member>
        <member name="M:BadMedicine.IPersonCollection.GeneratePeople(System.Int32,System.Random)">
            <summary>
            Generates <paramref name="numberOfUniqueIndividuals"/> random people (populating <see cref="P:BadMedicine.IPersonCollection.People"/>).
            </summary>
            <param name="numberOfUniqueIndividuals">Number of <see cref="P:BadMedicine.IPersonCollection.People"/> to generate</param>
            <param name="random">The seed upon which to generate data</param>
        </member>
        <member name="T:BadMedicine.Person">
            <summary>
            Randomly generated person for whom datasets can be built
            </summary>
        </member>
        <member name="M:BadMedicine.Person.GetDateOfDeathOrNullOn(System.DateTime)">
            <summary>
            If the person died before onDate it returns NULL (as of onDate we did not know when the person would die).  if onDate is > date of death it 
            returns the date of death (we knew when they died - you cannot predict the future but you can remember the past)
            </summary>
            <param name="onDate"></param>
            <returns></returns>
        </member>
        <member name="T:BadMedicine.PersonCollection">
            <inheritdoc/>
        </member>
        <member name="P:BadMedicine.PersonCollection.People">
            <inheritdoc/>
        </member>
        <member name="M:BadMedicine.PersonCollection.GeneratePeople(System.Int32,System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:BadMedicine.RowsGeneratedEventArgs">
            <summary>
            Args for the <see cref="E:BadMedicine.Datasets.IDataGenerator.RowsGenerated"/> event.  Describes how many rows have
            been generated and how long has gone by etc.
            </summary>
        </member>
        <member name="P:BadMedicine.RowsGeneratedEventArgs.RowsWritten">
            <summary>
            The current number of rows written (may differ from the line numbers of the file generated
            if the records contain newlines etc).
            </summary>
        </member>
        <member name="P:BadMedicine.RowsGeneratedEventArgs.ElapsedTime">
            <summary>
            The length of time elapsed since record writing began
            </summary>
        </member>
        <member name="P:BadMedicine.RowsGeneratedEventArgs.IsFinished">
            <summary>
            False for all event invocations except the last.  When this property is true you know the
            report generator has finished
            </summary>
        </member>
        <member name="M:BadMedicine.RowsGeneratedEventArgs.#ctor(System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Creates a new instance documenting how many rows have been written so far.
            </summary>
            <param name="rowsWritten"></param>
            <param name="elapsedTime"></param>
            <param name="isFinished">True if this the last invocation and the file generation is complete</param>
        </member>
    </members>
</doc>
